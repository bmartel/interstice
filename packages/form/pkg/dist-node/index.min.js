"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var litElement=require("lit-element"),classMap=require("lit-html/directives/class-map"),litHelpers=require("@open-wc/lit-helpers");const Validation=e=>(class extends e{static get properties(){return{rules:Array,messages:Array}}constructor(){super(),this.rules=[]}inputValue(){return this.value}inputName(){return this.name}validate(){this.messages=this.rules.filter(e=>e(this.inputValue())),this.status=this.messages.length?"error":"",this.dispatchEvent("validation",{composed:!0,bubbles:!0,detail:{name:this.inputName(),errors:this.messages}})}});function _defineProperty(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),r.push.apply(r,i)}return r}function _objectSpread2(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach(function(t){_defineProperty(e,t,r[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))})}return e}function _objectWithoutPropertiesLoose(e,t){if(null==e)return{};var r,i,s={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||(s[r]=e[r]);return s}function _objectWithoutProperties(e,t){if(null==e)return{};var r,i,s=_objectWithoutPropertiesLoose(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}class Form extends litElement.LitElement{static get properties(){return{valid:Boolean,value:Object,action:String,method:String,enctype:String}}constructor(){super(),this.value={},this.valid=!1,this.action="",this.method="POST",this.enctype="application/json",this.addEventListener("validation",e=>{this.valid=e.detail.errors.length<1})}updateField(e){this.value[e.target.name]=e.target.value}body(){if("application/json"!==this.enctype){const e=new FormData;return Object.keys(this.value).forEach(t=>{e[t]=this.value[t]}),e}return JSON.stringify(this.value)}headers(){return"multipart/form-data"!==this.enctype?{"Content-Type":this.enctype}:{}}async submit(){const{action:e,method:t,valid:r}=this;if(e&&r)try{const r=await fetch(e,{method:t,credentials:"include",body:this.body(),headers:this.headers()}),i=await r.json();this.dispatchEvent(new CustomEvent("form-update",{composed:!0,bubbles:!0,detail:_objectSpread2({},i)}))}catch(e){this.dispatchEvent(new CustomEvent("form-error",{composed:!0,bubbles:!0,detail:{error:e}}))}}render(){return litElement.html`
      <form @submit=${this.submit} @change=${this.updateField}>
        <slot></slot>
      </form>
    `}}customElements.define("i-form",Form);const fontStyles=litElement.html`
  <style>
    :host {
      font-family: var(--z-font-family);
    }
  </style>
`,fullWidthInput=litElement.html`
  <style>
    @media (min-width: 640px) {
      :host,
      .input-wrapper,
      .input:not(.check) {
        width: var(--z-w-full) !important;
      }
    }
  </style>
`;class FormInput extends(Validation(litElement.LitElement)){static get properties(){return{id:{type:String},name:{type:String},type:{type:String},value:{type:String},label:{type:String},hint:{type:String},placeholder:{type:String},messages:{type:Array},wide:{type:Boolean},inline:{type:Boolean},reversed:{type:Boolean},disabled:{type:Boolean},readonly:{type:Boolean},status:{type:String}}}static get styles(){return litElement.css`
      :host {
        display: inline-flex;
      }
      .input-wrapper {
        display: grid;
        grid-gap: var(--gap);
        grid-template-areas:
          'l l l'
          'h h h'
          'i i i'
          'm m m';
      }
      .hint {
        grid-area: h;
        font-size: var(--message-size);
        color: var(--input-placeholder-color);
        flex: 1;
        margin-bottom: var(--gap);
      }
      .label {
        grid-area: l;
        font-size: var(--label-size);
        color: var(--label-color);
        font-weight: var(--label-font-weight, 600);
      }
      .messages {
        font-size: var(--message-size);
        margin: var(--gap) 0 0 0;
        padding: 0;
        list-style: none;
        grid-area: m;
        display: grid;
      }
      :host,
      .input-wrapper,
      .input:not(.check) {
        width: var(--w-full);
      }
      :host,
      .input-wrapper,
      .label,
      .messages,
      .check,
      .input {
        box-sizing: border-box;
        transition: var(--transition);
      }
      .disabled {
        opacity: 0.6;
      }
      .inline {
        grid-template-areas:
          'l i i'
          'h i i'
          '. m m';

        grid-column-gap: calc(var(--gap) * 2.5);
        grid-row-gap: var(--gap);
        align-items: center;
      }
      .inline .label {
        grid-row: span 2;
      }
      .inline .hint {
        align-self: start;
      }
      .inline .hint + .label {
        grid-row: span 1;
        align-self: end;
      }
      .inline.reversed {
        grid-template-areas:
          'i i l'
          'i i h'
          'm m .';
      }
      .input {
        -webkit-appearance: none;
        -moz-appearance: none;
        -ms-appearance: none;
        grid-area: i;
        font-size: var(--font-size);
        font-family: var(--font-family);
        padding: var(--padding);
        color: var(--input-color);
        background-color: var(--input-background-color);
        border: var(--border-size) solid var(--border-color);
        border-radius: var(--round);
        outline-color: var(--outline-color);
      }
      .input::placeholder {
        color: var(--input-placeholder-color);
      }
      .input:focus {
        outline: 0;
        border-color: var(--color-primary);
      }
      .input:hover {
        border-color: var(--color-primary);
        box-shadow: var(--color-primary) 0 0 var(--outline-size);
      }
      .input-wrapper.error .input:hover {
        border-color: var(--color-error);
        box-shadow: var(--color-error) 0 0 var(--outline-size);
      }
      .input-wrapper.success .input:hover {
        border-color: var(--color-success);
        box-shadow: var(--color-success) 0 0 var(--outline-size);
      }
      .input::selection {
        color: var(--color-white);
        background-color: var(--color-accent);
      }
      .error .input::selection {
        background-color: var(--color-error);
      }
      .error .label,
      .error .check,
      .error .messages {
        color: var(--color-error);
      }
      .error .input {
        border-color: var(--color-error);
      }
      .success .input::selection {
        background-color: var(--color-success);
      }
      .success .label,
      .success .check,
      .success .messages {
        color: var(--color-success);
      }
      .success .input {
        border-color: var(--color-success);
      }
      @media (min-width: 640px) {
        :host,
        .input-wrapper,
        .input:not(.check) {
          width: initial;
        }
      }
    `}constructor(){super(),this.id="",this.name="",this.value=null,this.label="",this.hint="",this.placeholder="",this.messages=[],this.wide=!1,this.status="",this.inline=!1,this.reversed=!1,this.disabled=!1,this.readonly=!1}get error(){return"error"===this.status}set error(e){}get success(){return"success"===this.status}set success(e){}labelId(){return`label-${this.id}`}hintId(){return`hint-${this.id}`}inputName(){return this.name||this.id}renderLabel(){return this.label?litElement.html`
        <span class="label" .id=${this.labelId()}>${this.label}</span>
      `:null}renderHint(){return this.hint?litElement.html`
        <span class="hint" .id=${this.hintId()}>${this.hint}</span>
      `:null}renderInput(e={class:"input"}){return litElement.html`
      <input
        .id=${this.id}
        .value=${this.value}
        .type=${this.type}
        .name=${this.inputName()}
        .placeholder=${this.placeholder}
        .aria-labelledby=${this.labelId()}
        .aria-describedby=${this.hintId()}
        ?disabled=${this.disabled}
        ?readonly=${this.readonly}
        ...=${litHelpers.spread(e)}
      />
    `}renderMessages(){return this.messages.length?litElement.html`
        <ul class="messages">
          ${this.messages.map(e=>litElement.html`<li>${e}</li></ul>`)}
        </ul>
      `:null}render(){return litElement.html`
      ${fontStyles} ${this.wide?fullWidthInput:null}
      <label
        class=${classMap.classMap({"input-wrapper":!0,inline:this.inline,reversed:this.reversed,disabled:this.disabled,error:this.error,success:this.success})}
      >
        ${this.renderHint()} ${this.renderLabel()} ${this.renderInput()} ${this.renderMessages()}
      </label>
    `}}class TextField extends FormInput{constructor(){super(),this.type="text"}}customElements.define("i-textfield",TextField);class TextArea extends FormInput{static get properties(){return{rows:{type:Number}}}static get styles(){return litElement.css`
      ${FormInput.styles}
      textarea {
        min-height: calc(var(--font-size) * 7.7);
      }
    `}constructor(){super(),this.rows=4}renderInput(){return litElement.html`
      <textarea
        class="input"
        .id=${this.id}
        .value=${this.value}
        .placeholder=${this.placeholder}
        .name=${this.id}
        .rows=${this.rows}
        .aria-labelledby=${this.labelId()}
        .aria-describedby=${this.hintId()}
        ?disabled=${this.disabled}
        ?readonly=${this.readonly}
      >
        ${this.value}
      </textarea
      >
    `}}customElements.define("i-textarea",TextArea);const isObject=e=>null!=e&&"object"==typeof e&&"[object Object]"===Object.prototype.toString.call(e);class FormSelect extends FormInput{static get properties(){return{value:{type:Array},dependent:{type:Boolean},dependentOptions:{type:Object},options:{type:Array},inline:{type:Boolean},reversed:{type:Boolean},complex:{type:Boolean},labelKey:{type:String},valueKey:{type:String}}}static get styles(){return litElement.css`
      ${FormInput.styles}
      .select-group {
        display: grid;
        grid-gap: var(--z-gap);
      }
    `}constructor(){super(),this.value=[],this.options=[],this.labelKey="label",this.valueKey="value",this.reversed=!0,this.dependent=!1,this.dependentOptions={label:"All",value:"_all"},this.isDependentSelected=!1,this.complex=!1,this.addValue=this.addValue.bind(this),this.inputUpdate=this.inputUpdate.bind(this)}inputUpdate(e,t){if(this.dependent&&0===t)this.dependentUpdate(e);else if(this.resetDependentSelection(),e.target.checked)this.value=[...this.value,this.addValue(this.options.find(t=>this.convertValue(t)===e.target.value))];else{const t=this.value.findIndex(t=>this.convertValue(t)===e.target.value);this.value=[...this.value.slice(0,t),...this.value.slice(t+1)]}}inputId(e){return`${this.id}-${e+1}`}resetDependentSelection(){this.isDependentSelected&&(this.isDependentSelected=!1)}dependentUpdate(e){e.preventDefault(),e.target.checked?this.value=this.options.map(this.addValue):this.value=[]}addDependentOption(){return{[this.labelKey]:this.dependentOptions.label,[this.valueKey]:this.dependentOptions.value,name:this.dependentOptions.value}}dependentInput(e){return this.dependent&&0===e}computeDependent(){this.dependent&&(this.isDependentSelected=this.options.length===this.value.length&&this.options.every(e=>this.value.find(t=>this.convertValue(e)===this.convertValue(t))))}addValue(e){return this.complex?e:e[this.valueKey]}convertValue(e){return isObject(e)?e[this.valueKey]:e}convertLabel(e){return isObject(e)?e[this.labelKey]:e}inputSelected(e,t){return this.computeDependent(),this.dependentInput(t)&&this.isDependentSelected||this.value.some(t=>this.convertValue(t)===this.convertValue(e))}get selectOptions(){return this.dependent?[this.addDependentOption(),...this.options]:this.options}set selectOptions(e){}renderOption(e,t){return""}renderSelectOptions(){return this.selectOptions.map((e,t)=>this.renderOption(e,t))}renderInput(){return litElement.html`
      <div class="select-group">
        ${this.renderSelectOptions()}
      </div>
    `}}class Range extends FormInput{static get properties(){return{min:{Type:Number},max:{Type:Number},step:{Type:Number}}}static get styles(){return litElement.css`
      ${FormInput.styles}
      .input {
        border: none;
        padding: 0px;
      }
      input::-moz-range-track,
      input::-webkit-slider-runnable-track {
        width: 100%;
        cursor: pointer;
        height: var(--outline-size);
        background: var(--border-color);
        border-radius: var(--round);
        border: var(--border-size) solid var(--border-color);
      }
      input::-ms-track {
        width: 100%;
        cursor: pointer;
        height: var(--outline-size);
        background: var(--border-color);
        border-radius: var(--round);
        border: var(--border-size) solid var(--border-color);
      }
      input::-webkit-slider-thumb,
      input::-moz-range-thumb {
        -moz-appearance: none;
        -webkit-appearance: none;
        box-sizing: border-box;
        width: 25px;
        height: 25px;
        border: var(--border-size) solid transparent;
        border-radius: var(--round-full);
        background: var(--color-primary);
        cursor: pointer;
      }
      input::-ms-thumb {
        -ms-appearance: none;
        box-sizing: border-box;
        width: 26px;
        height: 26px;
        border-radius: var(--round-full);
        background: var(--color-primary);
        cursor: pointer;
      }
      .error input::-webkit-slider-thumb,
      .error input::-moz-range-thumb {
        border-color: var(--color-error);
        background: var(--color-error);
      }
      .error input::-ms-thumb {
        border-color: var(--color-error);
        background: var(--color-error);
      }
      .success input::-webkit-slider-thumb,
      .success input::-moz-range-thumb {
        border-color: var(--color-success);
        background: var(--color-success);
      }
      .success input::-ms-thumb {
        border-color: var(--color-success);
        background: var(--color-success);
      }
      input:focus::-moz-range-track,
      input:focus::-webkit-slider-runnable-track {
        background: var(--color-accent);
      }
      input::-ms-fill-lower {
        background: var(--color-primary);
      }
      input::-ms-fill-upper {
        background: var(--border-color);
      }
      input:focus::-ms-fill-lower {
        background: var(--color-accent);
      }
      input:focus::-ms-fill-upper {
        background: var(--border-color);
      }
    `}constructor(){super(),this.type="range",this.min=0,this.max=100,this.step=1,this.inputUpdate=this.inputUpdate.bind(this)}inputUpdate(e){this.value=e.target.value}renderInput(){return super.renderInput({class:"input","@input":this.inputUpdate})}}customElements.define("i-range",Range);class CheckBox extends FormInput{static get properties(){return{checked:{type:Boolean,reflect:!0}}}static get styles(){return litElement.css`
      ${FormInput.styles}
      .input {
        color: var(--color-primary);
      }
      .check:not(.input):not(.radio) {
        color: var(--color-white);
      }
      :host([checked]) input + .check {
        background-color: var(--color-primary);
        border-color: var(--color-primary);
      }
      :host([checked]) .error input + .check {
        background-color: var(--color-error);
        border-color: var(--color-error);
      }
      :host([checked]) .success input + .check {
        background-color: var(--color-success);
        border-color: var(--color-success);
      }
      .input.check {
        cursor: pointer;
        stroke: currentColor;
        stroke-width: 4px;
        width: 26px;
        height: 26px;
      }
      .hidden {
        opacity: 0;
        -webkit-appearance: none;
        -moz-appearance: none;
        width: 0;
        height: 0;
        cursor: pointer;
      }
    `}constructor(){super(),this.inline=!0,this.checked=!1,this.type="checkbox",this.inputUpdate=this.inputUpdate.bind(this)}inputStyles(){const e={display:"flex",cursor:"pointer"};return this.checked&&(e.padding="0"),e}inputUpdate(e){this.checked=e.target.checked,this.dispatchEvent(new CustomEvent("update"))}renderCheck(){return this.checked?litElement.html`
        <svg class="check" viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet">
          <path fill="none" d="M6,11.3 L10.3,16 L18,6.2"></path>
        </svg>
      `:null}renderInput(){return litElement.html`
      ${super.renderInput({class:"hidden","?checked":this.checked,"@click":this.inputUpdate})}
      <div class=${classMap.classMap({input:!0,check:!0,[this.type]:!0})} style="padding: 0;">
        ${this.renderCheck()}
      </div>
    `}}customElements.define("i-checkbox",CheckBox);class Radio extends CheckBox{static get styles(){return litElement.css`
      ${CheckBox.styles}
      .radio {
        fill: currentColor;
        border-radius: var(--round-full);
      }
      :host([checked]) input + .radio,
      :host([checked]) .error input + .radio,
      :host([checked]) .success input + .radio {
        background-color: var(--input-background-color);
      }
    `}constructor(){super(),this.type="radio"}renderCheck(){return this.checked?litElement.html`
        <svg class="check radio" viewBox="0 0 24 24" preserveAspectRatio="xMidYMid meet">
          <circle cx="12" cy="12" r="6"></circle>
        </svg>
      `:null}}customElements.define("i-radio",Radio);class CheckBoxGroup extends FormSelect{static get styles(){return litElement.css`
      ${FormSelect.styles}
      .messages {
        --gap: 0;
      }
      .label,
      .hint {
        margin-bottom: var(--gap);
      }
      .hint + .label {
        margin-bottom: 0;
      }
      .label + .select-group {
        margin-top: var(--gap);
      }
      i-checkbox {
        --label-font-weight: var(--font-normal);
      }
    `}renderOption(e,t){const r=_objectWithoutProperties(e,["inline","reversed","wide"]);return litElement.html`
      <i-checkbox
        .name=${this.name}
        .id=${this.inputId(t)}
        .label=${this.convertLabel(e)}
        .value=${this.convertValue(e)}
        ?checked=${this.inputSelected(e,t)}
        @update=${e=>this.inputUpdate(e,t)}
        reversed
        ...=${litHelpers.spread(r)}
      ></i-checkbox>
    `}}customElements.define("i-checkboxgroup",CheckBoxGroup);class RadioGroup extends FormSelect{static get properties(){return{value:{type:String}}}static get styles(){return litElement.css`
      ${FormSelect.styles}
      .messages {
        --gap: 0;
      }
      .label,
      .hint {
        margin-bottom: var(--gap);
      }
      .hint + .label {
        margin-bottom: 0;
      }
      .label + .select-group {
        margin-top: var(--gap);
      }
      i-radio {
        --label-font-weight: var(--font-normal);
      }
    `}constructor(){super(),this.value=""}inputUpdate(e){this.value=e.target.value}inputSelected(e){return this.value===this.convertValue(e)}renderOption(e,t){const r=_objectWithoutProperties(e,["inline","reversed","wide"]);return litElement.html`
      <i-radio
        .name=${this.name}
        .id=${this.inputId(t)}
        .label=${this.convertLabel(e)}
        .value=${this.convertValue(e)}
        ?checked=${this.inputSelected(e)}
        @click=${this.inputUpdate}
        reversed
        ...=${litHelpers.spread(r)}
      ></i-radio>
    `}}customElements.define("i-radiogroup",RadioGroup),exports.CheckBox=CheckBox,exports.CheckBoxGroup=CheckBoxGroup,exports.Form=Form,exports.FormInput=FormInput,exports.FormSelect=FormSelect,exports.Radio=Radio,exports.RadioGroup=RadioGroup,exports.Range=Range,exports.TextArea=TextArea,exports.TextField=TextField,exports.Validation=Validation;
//# sourceMappingURL=index.min.js.map