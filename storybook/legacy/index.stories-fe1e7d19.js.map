{"version":3,"file":"index.stories-fe1e7d19.js","sources":["../../node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-element/lit-element.js","../../node_modules/lit-html/directives/class-map.js","../../src/styles.js","../../src/elements/text-field.js","../../stories/index.stories.mdx"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst classMapCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `classList` if the property value is truthy; if the property value\n * is falsey, the property name is removed from the element's `classList`. For\n * example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo) => (part) => {\n    if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n        part.committer.name !== 'class' || part.committer.parts.length > 1) {\n        throw new Error('The `classMap` directive must be used in the `class` attribute ' +\n            'and must be the only part in the attribute.');\n    }\n    const { committer } = part;\n    const { element } = committer;\n    // handle static classes\n    if (!classMapCache.has(part)) {\n        element.className = committer.strings.join(' ');\n    }\n    const { classList } = element;\n    // remove old classes that no longer apply\n    const oldInfo = classMapCache.get(part);\n    for (const name in oldInfo) {\n        if (!(name in classInfo)) {\n            classList.remove(name);\n        }\n    }\n    // add new classes\n    for (const name in classInfo) {\n        const value = classInfo[name];\n        if (!oldInfo || value !== oldInfo[name]) {\n            // We explicitly want a loose truthy check here because\n            // it seems more convenient that '' and 0 are skipped.\n            const method = value ? 'add' : 'remove';\n            classList[method](name);\n        }\n    }\n    classMapCache.set(part, classInfo);\n});\n//# sourceMappingURL=class-map.js.map","import { html } from 'lit-element';\n\nexport const fontStyles = html`\n  <style>\n    :host {\n      font-family: var(--t-font-family);\n    }\n  </style>\n`;\n\nexport const fullWidthInput = html`\n  <style>\n    @media (min-width: 640px) {\n      :host,\n      .input-wrapper,\n      .input {\n        width: var(--t-w-full) !important;\n      }\n    }\n  </style>\n`;\n\nexport const inputStyles = html`\n  <style>\n    :host {\n      display: inline-flex;\n    }\n    .input-wrapper {\n      display: grid;\n      grid-gap: var(--t-gap);\n      grid-template-areas: \"l l l\"\n                           \"i i i\"\n                           \"m m m\";\n    }\n    .input {\n      grid-area: i;\n    }\n    .label {\n      grid-area: l;\n      font-size: var(--t-label-size);\n      color: var(--t-label-color);\n    }\n    .messages {\n      font-size: var(--t-message-size);\n      color: var(--t-message-color);\n      margin: 0;\n      padding: 0;\n      list-style: none;\n      grid-area: m;\n      display: grid;\n    }\n    :host,\n    .input-wrapper,\n    .input {\n      width: var(--t-w-full);\n    }\n    :host,\n    .input-wrapper,\n    .label,\n    .messages,\n    .input {\n      box-sizing: border-box;\n      transition: var(--t-transition);\n    }\n    .input-wrapper.inline {\n      grid-template-areas: \"l i i\"\n                           \". m m\";\n      align-items: center;\n    }\n    .input {\n      font-size: var(--t-font-size);\n      font-family: var(--t-font-family);\n      padding: var(--t-padding);\n      color: var(--t-color);\n      border: var(--t-border-size) solid var(--t-border-color);\n      border-radius: var(--t-round);\n    }\n    .input:focus {\n      outline: 0;\n      border-color: var(--t-color-primary);\n      box-shadow: var(--t-color-primary) 0 0 0 var(--t-outline-size);\n    }\n    .input::selection {\n      color: var(--t-color-white);\n      background-color: var(--t-color-accent);\n    }\n    .input-wrapper.error .input::selection {\n      background-color: var(--t-color-error);\n    }\n    .input-wrapper.error .label, .input-wrapper.error .messages {\n      color: var(--t-color-error);\n    }\n    .input-wrapper.error .input {\n      border-color: var(--t-color-error);\n      box-shadow: var(--t-color-error) 0 0 0 var(--t-outline-size);\n    }\n    .input-wrapper.success .input::selection {\n      background-color: var(--t-color-success);\n    }\n    .input-wrapper.success .label, .input-wrapper.success .messages {\n      color: var(--t-color-success);\n    }\n    .input-wrapper.success .input {\n      border-color: var(--t-color-success);\n      box-shadow: var(--t-color-success) 0 0 0 var(--t-outline-size);\n    }\n    @media (min-width: 640px) {\n      :host,\n      .input-wrapper,\n      .input {\n        width: initial;\n      }\n    }\n  </style>\n`;\n","import { html, LitElement } from 'lit-element';\nimport { classMap } from 'lit-html/directives/class-map';\nimport { fontStyles, inputStyles, fullWidthInput } from '../styles.js';\n\n/**\n * @element t-text-field\n *\n * @cssprop --t-font-size\n * @cssprop --t-font-family\n * @cssprop --t-padding\n * @cssprop --t-gap\n * @cssprop --t-transition\n * @cssprop --t-color\n * @cssprop --t-color-primary\n * @cssprop --t-color-accent\n * @cssprop --t-color-error\n * @cssprop --t-border-color\n * @cssprop --t-border-size\n * @cssprop --t-label-color\n * @cssprop --t-label-size\n * @cssprop --t-message-color\n * @cssprop --t-message-size\n * @cssprop --t-outline-size\n */\nexport class TextField extends LitElement {\n  static get properties() {\n    return {\n      id: { type: String },\n      label: { type: String },\n      messages: { type: Array },\n      wide: { type: Boolean },\n      inline: { type: Boolean },\n      status: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.id = '';\n    this.label = '';\n    this.messages = [];\n    this.wide = false;\n    this.status = '';\n    this.inline = false;\n  }\n\n  error() {\n    return this.status === 'error'\n  }\n\n  success() {\n    return this.status === 'success'\n  }\n\n  labelId() {\n    return `lbl-${this.id}`;\n  }\n\n  render() {\n    return html`\n      ${fontStyles} ${inputStyles} ${this.wide ? fullWidthInput : null}\n      <label class=${classMap({ 'input-wrapper': true, inline: this.inline, error: this.error(), success: this.success() })}>\n        <span class=\"label\" .id=${this.labelId()}>${this.label}</span>\n        <input\n          class=\"input\"\n          type=\"text\"\n          .id=${this.id}\n          .name=${this.id}\n          .aria-labelledby=${this.labelId()}\n        />\n        ${this.messages.length\n          ? html`\n              <ul class=\"messages\">\n                ${this.messages.map(msg => html`<li>${msg}</li></ul>`)}\n              </ul>\n            `\n          : null}\n      </label>\n    `;\n  }\n}\n\nwindow.customElements.define('t-text-field', TextField);\n","import { Story, Preview, Meta, Props, html } from '@open-wc/demoing-storybook';\n\nimport { TextField } from '../index.js';\n\n<Meta \n  title=\"TextField\"\n  parameters={{\n    component: \"t-text-field\",\n    options: { selectedPanel: \"storybookjs/knobs/panel\" }\n  }}\n/>\n\n# TextField\n\nA form component for displaying a text input in a form with some styling and behaviour improvements.\n\n## Features:\n\n- a\n- b\n- ...\n\n## How to use\n\n### Installation\n\n```bash\nyarn add tailwind-elements\n```\n\n```js\nimport { TextField } from 'tailwind-elements';\n```\n\n<Preview withToolbar>\n  <Story name=\"Simple\">\n    {html`\n      <t-text-field id=\"simple\"></t-text-field>\n    `}\n  </Story>\n</Preview>\n\n## API\n\n<Props of=\"t-text-field\" />\n\n## Variations\n\n###### Wide\n\n<Story name=\"Wide\">\n  {html`\n    <t-text-field id=\"wide\" wide></t-text-field>\n  `}\n</Story>\n\n###### Label\n\n<Story name=\"Label\">\n  {html`\n    <t-text-field id=\"label\" label=\"Name\"></t-text-field>\n  `}\n</Story>\n\n###### Inline Label\n\n<Story name=\"Inline Label\">\n  {html`\n    <t-text-field id=\"inline-label\" label=\"Name\" inline></t-text-field>\n  `}\n</Story>\n\n\n###### Messages\n\n<Story name=\"Messages\">\n  {html`\n    <t-text-field id=\"messages\" label=\"Name\" .messages=${['This is a message']}></t-text-field>\n  `}\n</Story>\n\n###### Error\n\n<Story name=\"Error\">\n  {html`\n    <t-text-field id=\"error\" label=\"Name\" status=\"error\"></t-text-field>\n  `}\n</Story>\n\n###### Success \n\n<Story name=\"Success\">\n  {html`\n    <t-text-field id=\"success\" label=\"Name\" status=\"success\"></t-text-field>\n  `}\n</Story>"],"names":["removeNodesFromTemplate","template","nodesToRemove","content","element","parts","walker","document","createTreeWalker","partIndex","nextActiveIndexInTemplateParts","part","nodeIndex","removeCount","nodesToRemoveInTemplate","currentRemovingNode","nextNode","node","currentNode","previousSibling","has","push","undefined","index","forEach","n","parentNode","removeChild","countNodes","count","nodeType","startIndex","i","length","isTemplatePartActive","getTemplateCacheKey","type","scopeName","compatibleShadyCSSVersion","window","ShadyCSS","prepareTemplateDom","console","warn","shadyTemplateFactory","result","cacheKey","templateCache","templateCaches","get","stringsArray","WeakMap","keyString","Map","set","strings","key","join","marker","getTemplateElement","Template","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","createElement","styles","querySelectorAll","condensedStyle","_style","textContent","templates","Array","from","s","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","walkerNode","insertBefore","appendChild","insertNodeIntoTemplate","firstChild","style","querySelector","nativeShadow","cloneNode","removes","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","Boolean","Object","JSON","stringify","fromAttribute","Number","parse","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","microtaskPromise","Promise","resolve","UpdatingElement","_updateState","_instanceProperties","_updatePromise","_hasConnectedResolver","_changedProperties","_reflectingProperties","initialize","_saveInstanceProperties","_requestUpdate","constructor","_classProperties","_v","p","_this2","hasOwnProperty","v","_this3","this","name","_attributeToProperty","options","ctor","attr","_attributeNameForProperty","attrValue","_propertyValueToAttribute","removeAttribute","setAttribute","propName","_attributeToPropertyMap","_propertyValueFromAttribute","oldValue","shouldRequestUpdate","_valueHasChanged","_hasRequestedUpdate","_enqueueUpdate","updateComplete","previousUpdatePromise","res","rej","reject","_hasConnected","_this4","performUpdate","_applyInstanceProperties","shouldUpdate","changedProperties","update","e","_markUpdated","firstUpdated","updated","size","k","_this5","_propertyToAttribute","_getUpdateComplete","superProperties","getPrototypeOf","_this6","_ensureClassProperties","noAccessor","prototype","_typeof","Symbol","defineProperty","configurable","enumerable","superCtor","finalize","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","createProperty","toLowerCase","attributes","_this7","HTMLElement","supportsAdoptingStyleSheets","Document","CSSStyleSheet","flattenStyles","flat","Infinity","arrayFlat","isArray","LitElement","renderRoot","createRenderRoot","ShadowRoot","adoptStyles","attachShadow","mode","_styles","adoptedStyleSheets","map","styleSheet","_needsShimAdoptedStyleSheets","ScopingShim","prepareAdoptedCssText","cssText","localName","hasUpdated","styleElement","templateResult","render","TemplateResult","eventContext","_this","call","_getUniqueStyles","userStyles","reduceRight","unshift","container","Error","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","assign","templateFactory","delete","TemplateInstance","removeNodes","classMapCache","classMap","directive","classInfo","AttributePart","PropertyPart","committer","className","classList","oldInfo","remove","_name","fontStyles","html","fullWidthInput","inputStyles","TextField","id","label","messages","wide","status","inline","error","success","labelId","msg","customElements","define","layoutProps","MDXContent","components","mdx","mdxType","Meta","title","parameters","component","selectedPanel","parentName","Preview","withToolbar","Story","Props","of","isMDXComponent","simple","story","mdxSource","inlineLabel","componentMeta","includeStories","mdxStoryNameToKey","docs","page","AddContext","mdxComponentMeta"],"mappings":"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"}